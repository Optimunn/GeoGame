import { VerticalBox, GridBox } from "std-widgets.slint";
import { ImageResizable, ImageStatic} from "images.slint";
import { MyButton } from "mybutton.slint";

struct ButtonData {
    text: string,
    color: color
}

export component PrimeWindow inherits Rectangle {
    callback settings-window;
    callback button-clicked(int);
    callback click-continue;
    in property <[ButtonData]> button-data;
    in property <image> icon;

    ImageStatic {
        icon: @image-url("../assets/icons/settings.svg");
        x: 0px;
        y: 0px;
        my_size: 30px;
        clicked => {root.settings-window()}
    }

    v_box:= VerticalBox {
        alignment: center;
        padding-right: 20px;
        padding-left: 20px;

        Text {
            vertical-alignment: center;
            horizontal-alignment: center;
            font-size: 32px;
            text: "What is country?";
        }

        ImageResizable {
            icon: icon;
        }

        function ret_width() -> length {
            return (root.width - grid_box.spacing * 3 -
                v_box.padding-left - v_box.padding-right) / 2;
        }

        function ret_height() -> length {
            return root.height / 10;
        }

        grid_box:= GridBox {
            //spacing: 10px;
            MyButton {row: 0; border-color: root.button-data[0].color; width: ret_width();
                my_height: ret_height(); text: root.button-data[0].text; clicked => {root.button-clicked(0); screen.visible = true} }
            MyButton { border-color: root.button-data[1].color; width: ret_width();
                my_height: ret_height(); text: root.button-data[1].text; clicked => {root.button-clicked(1); screen.visible = true} }

            MyButton {row: 1; border-color: root.button-data[2].color; width: ret_width();
                my_height: ret_height(); text: root.button-data[2].text; clicked => {root.button-clicked(2); screen.visible = true} }
            MyButton { border-color: root.button-data[3].color; width: ret_width();
                my_height: ret_height(); text: root.button-data[3].text; clicked => {root.button-clicked(3); screen.visible = true} }
        }
    }

    screen:= TouchArea {
        visible: false;
        clicked => {
            self.visible = false;
            root.click-continue();
        }
    }
}
